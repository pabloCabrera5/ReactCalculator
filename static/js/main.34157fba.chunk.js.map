{"version":3,"sources":["utils.js","constants.js","components/Cell.js","components/Result.js","components/Formula.js","App.js","serviceWorker.js","index.js"],"names":["_isOperator","value","_isNumber","isNaN","_isNumberDiferentFrom0","_isDot","_isEqual","evaluate","state","checkResult","formula","length","slice","includes","replace","res","eval","toFixed","result","calculated","float","prevValue","error","evaluatedAndContinue","data","initialize","operateWithNumber","operateWithDot","operateWithOperator","contentCells","id","operators","Cell","props","_handleClick","e","sendValue","target","className","this","map","key","type","onClick","Component","defaultProps","Result","Formula","App","_receiveValue","_resetValues","console","log","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gJAAA,4yBACA,IAAMA,YAAc,SAACC,GACjB,MAAiB,MAAVA,GAA2B,MAAVA,GAA2B,MAAVA,GAA2B,MAAVA,GAGxDC,UAAY,SAACD,GACf,OAAQE,MAAMF,IAGZG,uBAAyB,SAACH,GAC5B,OAAQE,MAAMF,MAAqB,KAATA,IAAiBE,MAAMF,KAI/CI,OAAS,SAACJ,GACZ,MAAiB,MAAVA,GAILK,SAAW,SAACL,GACd,MAAiB,MAAVA,GAILM,SAAW,SAAXA,SAAYC,OACd,IAAIC,YAAcD,MAAME,QAEpBV,YAAYS,YAAYA,YAAYE,OAAS,MAC7CF,YAAcA,YAAYG,MAAM,GAAI,IAGpCH,YAAYI,SAAS,QACrBJ,YAAcA,YAAYK,QAAQ,KAAM,MAE5C,IAEI,IAAIC,IAAMC,KAAKP,aAAaQ,QAAQ,GACpC,MAAO,CACHC,OAAQH,IACRL,QAASD,YAAc,IAAMM,IAC7BI,YAAY,EACZC,OAAO,EACPC,UAAW,IAEjB,MAAOC,OAEL,MAAO,CACHJ,OAAQ,MACRC,YAAY,KAKlBI,qBAAuB,SAACf,EAAOgB,GAEjC,OAAIxB,YAAYwB,GACL,CACHd,QAASF,EAAMU,OAASM,EACxBN,OAAQM,EACRL,YAAY,EACZE,UAAWb,EAAMU,QAIhBd,uBAAuBoB,GACrB,CACHd,QAASc,EACTN,OAAQM,EACRL,YAAY,GAIXjB,UAAUsB,GACR,CACHd,QAAS,GACTQ,OAAQM,EACRL,YAAY,GAIXd,OAAOmB,GACL,CACHd,QAAS,IAAMc,EACfN,OAAQ,IAAMM,EACdJ,OAAO,EACPD,YAAY,QALf,GAUHM,WAAa,SAACjB,EAAOgB,GAEvB,OAAItB,UAAUsB,GACH,CACHd,QAASc,EACTN,OAAQM,GAIPnB,OAAOmB,GACL,CACHd,QAAS,IAAMc,EACfN,OAAQV,EAAMU,OAASM,EACvBJ,OAAO,QAJV,GASHM,kBAAoB,SAAClB,EAAOgB,GAE9B,OAAIxB,YAAYQ,EAAMU,QACX,CACHG,UAAWb,EAAME,QACjBA,QAASF,EAAME,QAAUc,EACzBN,OAAQM,GAIPpB,uBAAuBI,EAAMU,SAAWb,OAAOG,EAAMU,QACnD,CACHR,QAASF,EAAME,QAAUc,EACzBN,OAAQV,EAAMU,OAASM,GAKpB,CACHd,QAASF,EAAMa,UAAYG,EAC3BN,OAAQM,IAIdG,eAAiB,SAACnB,EAAOgB,GAE3B,OAAIxB,YAAYQ,EAAMU,QACX,CACHR,QAASF,EAAME,QAAUc,EACzBN,OAAQM,EACRJ,OAAO,GAKJ,CACHV,QAASF,EAAME,QAAUc,EACzBN,OAAQV,EAAMU,OAASM,EACvBJ,OAAO,IAIbQ,oBAAsB,SAACpB,EAAOgB,GAGhC,OAAItB,UAAUM,EAAMU,QACT,CACHG,UAAWb,EAAME,QACjBA,QAASF,EAAME,QAAUc,EACzBN,OAAQM,EACRJ,OAAO,GAKJ,CACHV,QAASF,EAAMa,UAAYG,EAC3BN,OAAQM,EACRJ,OAAO,K,iPCtKNS,G,YAAe,CACxBA,aAAc,CACV,CACIC,GAAI,OACJ7B,MAAO,GAEX,CACI6B,GAAI,MACJ7B,MAAO,GAEX,CACI6B,GAAI,MACJ7B,MAAO,GAEX,CACI6B,GAAI,QACJ7B,MAAO,GAEX,CACI6B,GAAI,OACJ7B,MAAO,GAEX,CACI6B,GAAI,OACJ7B,MAAO,GAEX,CACI6B,GAAI,MACJ7B,MAAO,GAEX,CACI6B,GAAI,QACJ7B,MAAO,GAEX,CACI6B,GAAI,SACJ7B,MAAO,GAEX,CACI6B,GAAI,OACJ7B,MAAO,GAEX,CACI6B,GAAI,UACJ7B,MAAO,MAEf8B,UAAW,CACP,CACID,GAAI,MACJ7B,MAAO,KAEX,CACI6B,GAAI,YACJ7B,MAAO,KAEX,CACI6B,GAAI,WACJ7B,MAAO,KAEX,CACI6B,GAAI,SACJ7B,MAAO,KAEX,CACI6B,GAAI,QACJ7B,MAAO,KAEX,CACI6B,GAAI,QACJ7B,MAAO,SC9DN+B,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,aAAe,SAACC,GACZ,EAAKF,MAAMG,UAAUD,EAAEE,OAAOpC,QARf,EADvB,kGAYc,IAAD,OACL,OACI,yBAAKqC,UAAU,mBACX,yBAAKA,UAAU,WACVC,KAAKN,MAAMJ,aAAaW,KAAI,SAAAvC,GAAK,OAC9B,4BAAQwC,IAAKxC,EAAM6B,GACfY,KAAK,SACLC,QAAS,EAAKT,aACdJ,GAAI7B,EAAM6B,GACV7B,MAAOA,EAAMA,OACZA,EAAMA,WAInB,yBAAKqC,UAAU,aACVC,KAAKN,MAAMF,UAAUS,KAAI,SAAAvC,GAAK,OAC3B,4BAAQwC,IAAKxC,EAAM6B,GACfY,KAAK,SACLC,QAAS,EAAKT,aACdJ,GAAI7B,EAAM6B,GACV7B,MAAOA,EAAMA,OACZA,EAAMA,gBAjCnC,GAA0B2C,aAgD1BZ,EAAKa,aAAe,CAChBhB,gB,UCpDSiB,EAAS,SAACb,GACnB,OACI,yBAAKK,UAAU,UACX,2BAAIL,EAAMf,UCHT6B,G,MAAU,SAACd,GACpB,OACI,yBAAKK,UAAU,WACX,2BAAIL,EAAMvB,Y,OCoFPsC,E,4MA7EbxC,MAAQ,CACNU,OAAQ,IACRR,QAAS,GACTW,UAAW,GACXF,YAAY,EACZC,OAAO,G,EAIT6B,cAAgB,SAACzB,GACf,IAAIhB,EAAQ,EAAKA,MAEJ,OAATgB,EACFhB,EAAQ,EAAK0C,eAGN5C,YAASkB,KAAUhB,EAAMW,WAChCX,EAAQD,YAASC,IAGTF,YAASkB,IAAShB,EAAMW,YAChCgC,QAAQC,IAAI,yBAEZ5C,EAAQe,YAAqBf,EAAOgB,IAG5BlB,YAASkB,KAEM,KAAlBhB,EAAME,SAAoC,MAAlBF,EAAME,SAAqC,MAAjBF,EAAMU,OAMvDhB,YAAUsB,GACZhB,EAAQkB,YAAkBlB,EAAOgB,GAG1BnB,YAAOmB,KAAUhB,EAAMY,MAC9BZ,EAAQmB,YAAenB,EAAOgB,GAGvBxB,YAAYwB,KACnBhB,EAAQoB,YAAoBpB,EAAOgB,IAdrChB,EAAQiB,YAAWjB,EAAOgB,IAkB9B,EAAK6B,SAAS7C,I,EAGhB0C,aAAe,WACb,MAAO,CACLhC,OAAQ,IACRR,QAAS,GACTU,OAAO,I,uDAKT,OACE,yBAAKkB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAS5B,QAAS6B,KAAK/B,MAAME,UAC7B,kBAAC,EAAD,CAAQQ,OAAQqB,KAAK/B,MAAMU,SAC3B,kBAAC,EAAD,CACEkB,UAAWG,KAAKU,cAChBpB,aAAcA,EAAaA,aAC3BE,UAAWF,EAAaE,mB,GArEpBa,aCDEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACL6B,QAAQ7B,MAAMA,EAAMiD,c","file":"static/js/main.34157fba.chunk.js","sourcesContent":["// Function to know if the data is a simbol operation\r\nconst _isOperator = (value) => {\r\n    return value === '+' || value === '-' || value === '/' || value === '*';\r\n}\r\n// Function to know if the data is a number\r\nconst _isNumber = (value) => {\r\n    return !isNaN(value);\r\n}\r\n// Function to know if the data is a number diferente from 0 ( but have to be a number otherwise false sure)\r\nconst _isNumberDiferentFrom0 = (value) => {\r\n    return !isNaN(value) && !(value == '0' && !isNaN(value));\r\n}\r\n\r\n// Function to know if the data is a dot\r\nconst _isDot = (value) => {\r\n    return value === '.'\r\n}\r\n\r\n// Function to know if the data is an equal\r\nconst _isEqual = (value) => {\r\n    return value === '='\r\n}\r\n\r\n// Function to evaluate and calculate the final result of the operation\r\nconst evaluate = (state) => {\r\n    let checkResult = state.formula;\r\n    // If the last element is an operator we remove it\r\n    if (_isOperator(checkResult[checkResult.length - 1])) {\r\n        checkResult = checkResult.slice(0, -1);\r\n    }\r\n    // If we have double minus its equal to a plus\r\n    if (checkResult.includes('--')) {\r\n        checkResult = checkResult.replace('--', '+')\r\n    }\r\n    try {\r\n        // then we evalutate the result and send the data update\r\n        let res = eval(checkResult).toFixed(2);\r\n        return {\r\n            result: res,\r\n            formula: checkResult + '=' + res,\r\n            calculated: true,\r\n            float: false,\r\n            prevValue: ''\r\n        }\r\n    } catch (error) {\r\n        // otherwise we return an error\r\n        return {\r\n            result: 'NaN',\r\n            calculated: true\r\n        }\r\n    }\r\n}\r\n\r\nconst evaluatedAndContinue = (state, data) => {\r\n    // If we have something calculated yet and we press and operator button, we continue operating with the result of the previous operation\r\n    if (_isOperator(data)) {\r\n        return {\r\n            formula: state.result + data,\r\n            result: data,\r\n            calculated: false,\r\n            prevValue: state.result\r\n        }\r\n    }\r\n    // If we have something calculated yet and we pulse a number, we reset all with this number (!= 0)\r\n    else if (_isNumberDiferentFrom0(data)) {\r\n        return {\r\n            formula: data,\r\n            result: data,\r\n            calculated: false\r\n        }\r\n    }\r\n    // If we have something calculated yet and we pulse a number, we reset all with this 0 and empty\r\n    else if (_isNumber(data)) {\r\n        return {\r\n            formula: '',\r\n            result: data,\r\n            calculated: false\r\n        }\r\n    }\r\n    // If we have something calculated yet and we pulse the dot, we reset all with 0.\r\n    else if (_isDot(data)) {\r\n        return {\r\n            formula: '0' + data,\r\n            result: '0' + data,\r\n            float: true,\r\n            calculated: false\r\n        }\r\n    }\r\n}\r\n\r\nconst initialize = (state, data) => {\r\n    // case is a number we set the number\r\n    if (_isNumber(data)) {\r\n        return {\r\n            formula: data,\r\n            result: data\r\n        }\r\n    }\r\n    // case its a dot we set to 0.\r\n    else if (_isDot(data)) {\r\n        return {\r\n            formula: '0' + data,\r\n            result: state.result + data,\r\n            float: true\r\n        }\r\n    }\r\n}\r\n\r\nconst operateWithNumber = (state, data) => {\r\n    // and we press a operator before\r\n    if (_isOperator(state.result)) {\r\n        return {\r\n            prevValue: state.formula, // we save the value in case they press multiples times 0\r\n            formula: state.formula + data,\r\n            result: data\r\n        }\r\n    }\r\n    // if we press a number (1) and the value in the result is != from 0 (1 ->11) or its a dot (. ->0.1)\r\n    else if (_isNumberDiferentFrom0(state.result) || _isDot(state.result)) {\r\n        return {\r\n            formula: state.formula + data,\r\n            result: state.result + data\r\n        }\r\n    }\r\n    // the value in the result its a zero\r\n    else {\r\n        return {\r\n            formula: state.prevValue + data, // we use the prevValue stored\r\n            result: data\r\n        }\r\n    }\r\n}\r\nconst operateWithDot = (state, data) => {\r\n    // if we have pressed before an operator , we want a dot (.) who is like if we have an (0.) (0.X === .X)\r\n    if (_isOperator(state.result)) {\r\n        return {\r\n            formula: state.formula + data,\r\n            result: data,\r\n            float: true\r\n        }\r\n    }\r\n    // we have a number and we set the dot\r\n    else {\r\n        return {\r\n            formula: state.formula + data,\r\n            result: state.result + data,\r\n            float: true\r\n        }\r\n    }\r\n}\r\nconst operateWithOperator = (state, data) => {\r\n    // if we have a number in the result we replace it and save the prevValue in case we press multiples times an operator and have to update it\r\n    // we let introduce another float number\r\n    if (_isNumber(state.result)) {\r\n        return {\r\n            prevValue: state.formula,\r\n            formula: state.formula + data,\r\n            result: data,\r\n            float: false\r\n        }\r\n    }\r\n    // if we pressed an operator multiples time we only update the result and the formula with the corresponding last operator\r\n    else {\r\n        return {\r\n            formula: state.prevValue + data,\r\n            result: data,\r\n            float: false\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    _isOperator,\r\n    _isNumber,\r\n    _isNumberDiferentFrom0,\r\n    _isDot,\r\n    _isEqual,\r\n    evaluate,\r\n    evaluatedAndContinue,\r\n    initialize,\r\n    operateWithNumber,\r\n    operateWithDot,\r\n    operateWithOperator\r\n}\r\n","export const contentCells = {\r\n    contentCells: [\r\n        {\r\n            id: 'zero',\r\n            value: 0\r\n        },\r\n        {\r\n            id: 'one',\r\n            value: 1\r\n        },\r\n        {\r\n            id: 'two',\r\n            value: 2\r\n        },\r\n        {\r\n            id: 'three',\r\n            value: 3\r\n        },\r\n        {\r\n            id: 'four',\r\n            value: 4\r\n        },\r\n        {\r\n            id: 'five',\r\n            value: 5\r\n        },\r\n        {\r\n            id: 'six',\r\n            value: 6\r\n        },\r\n        {\r\n            id: 'seven',\r\n            value: 7\r\n        },\r\n        {\r\n            id: 'height',\r\n            value: 8\r\n        },\r\n        {\r\n            id: 'nine',\r\n            value: 9\r\n        },\r\n        {\r\n            id: 'decimal',\r\n            value: '.'\r\n        }],\r\n    operators: [\r\n        {\r\n            id: 'add',\r\n            value: '+'\r\n        },\r\n        {\r\n            id: 'substract',\r\n            value: '-'\r\n        },\r\n        {\r\n            id: 'multiply',\r\n            value: '*'\r\n        },\r\n        {\r\n            id: 'divide',\r\n            value: '/'\r\n        },\r\n        {\r\n            id: 'equal',\r\n            value: '='\r\n        },\r\n        {\r\n            id: 'clear',\r\n            value: 'AC'\r\n        }]\r\n}","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/cell.css';\r\nimport { contentCells } from \"../constants\";\r\n\r\n\r\nexport class Cell extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    _handleClick = (e) => {\r\n        this.props.sendValue(e.target.value)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='calculatorCells'>\r\n                <div className='numbers'>\r\n                    {this.props.contentCells.map(value => (\r\n                        <button key={value.id}\r\n                            type='button'\r\n                            onClick={this._handleClick}\r\n                            id={value.id}\r\n                            value={value.value}>\r\n                            {value.value}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n                <div className='operators'>\r\n                    {this.props.operators.map(value => (\r\n                        <button key={value.id}\r\n                            type='button'\r\n                            onClick={this._handleClick}\r\n                            id={value.id}\r\n                            value={value.value}>\r\n                            {value.value}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nCell.propTypes = {\r\n    contentCells: PropTypes.array.isRequired,\r\n    operators: PropTypes.array.isRequired\r\n}\r\nCell.defaultProps = {\r\n    contentCells\r\n}","import React from 'react';\r\nimport '../styles/result.css'\r\n\r\n\r\nexport const Result = (props) => {\r\n    return (\r\n        <div className='result'>\r\n            <p>{props.result}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport '../styles/formula.css'\r\n\r\n\r\nexport const Formula = (props) => {\r\n    return (\r\n        <div className='formula'>\r\n            <p>{props.formula}</p>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\n\nimport './App.css';\nimport { Cell } from './components/Cell';\nimport { Result } from './components/Result';\nimport { Formula } from './components/Formula';\nimport { contentCells } from './constants';\nimport {\n  _isNumber, _isNumberDiferentFrom0, _isOperator, _isDot, _isEqual,\n  initialize, evaluate, evaluatedAndContinue,\n  operateWithNumber, operateWithDot, operateWithOperator\n} from \"./utils\";\n\nclass App extends Component {\n  state = {\n    result: '0',\n    formula: '',\n    prevValue: '',\n    calculated: false,\n    float: false,\n  }\n\n\n  _receiveValue = (data) => {\n    let state = this.state;\n    // when we click the button AC, we reset all\n    if (data === 'AC') {\n      state = this._resetValues();\n    }\n    // when we want to have the result\n    else if (_isEqual(data) && !state.calculated) {\n      state = evaluate(state);\n    }\n    // if we already have a result but want to continue operating ( avoiding recalculating the same multiples time if we press = )\n    else if (!_isEqual(data) && state.calculated) {\n      console.log('no calcula , but oper')\n      // to not call without needed to the evaluatefunction\n      state = evaluatedAndContinue(state, data);\n    }\n    // We havent done any operation yet (avoid enter here if we press multiples times = )\n    else if (!_isEqual(data)) {\n      // the first time we press a button\n      if ((state.formula === '' || state.formula === '0') && state.result === '0') {\n        state = initialize(state, data);\n      }\n      // we have already some data in the formula and result\n      else {\n        // if its a number ex: 1\n        if (_isNumber(data)) {\n          state = operateWithNumber(state, data);\n        }\n        // if its a dot and we havent set any dot/float number yet\n        else if (_isDot(data) && !state.float) {\n          state = operateWithDot(state, data);\n        }\n        // if its an operator (*)\n        else if (_isOperator(data)) {\n          state = operateWithOperator(state, data);\n        }\n      }\n    }\n    this.setState(state)\n  }\n\n  _resetValues = () => {\n    return {\n      result: '0',\n      formula: '',\n      float: false,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className='calculator'>\n            <Formula formula={this.state.formula}></Formula>\n            <Result result={this.state.result}></Result>\n            <Cell\n              sendValue={this._receiveValue}\n              contentCells={contentCells.contentCells}\n              operators={contentCells.operators} />\n          </div>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}